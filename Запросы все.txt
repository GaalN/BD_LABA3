ЗАПРОСЫ	
]	
	9
	{
		INSERT INTO Дисциплины (Название_дисциплины) VALUES ('Физика');
		INSERT INTO Дисциплины (Название_дисциплины) VALUES ('Математика');
		INSERT INTO Дисциплины (Название_дисциплины) VALUES ('Химия');
		INSERT INTO Дисциплины (Название_дисциплины) VALUES ('Литература');
		INSERT INTO Дисциплины (Название_дисциплины) VALUES ('Аналитическая Геометрия');
		INSERT INTO Дисциплины (Название_дисциплины) VALUES ('Базы данных');

		INSERT INTO Преподаватели (ФИО, Пол, Дата_рождения, Ученая_степень) VALUES ('Сонапчук Ольга Викторовна','F','1989-04-23','Кандидат наук');
		INSERT INTO Преподаватели (ФИО, Пол, Дата_рождения, Ученая_степень) VALUES ('Суворова Милена Владимировна','F','1967-01-30','Доктор наук');
		INSERT INTO Преподаватели (ФИО, Пол, Дата_рождения) VALUES ('Абрамов Владимир Олегович','M','1993-08-08');
		INSERT INTO Преподаватели (ФИО, Пол, Дата_рождения, Ученая_степень) VALUES ('Михаил Алексеевич Пронин','M','1957-01-12', 'Доктор наук');

		INSERT INTO Студенты (ФИО, Пол, Дата_рождения, Номер_атестатта) VALUES ('Куликова Светлана Елисеевна','Ж','2003-03-19','96592');
		INSERT INTO Студенты (ФИО, Пол, Дата_рождения, Номер_атестатта) VALUES ('Полякова Варвара Юрьевна','Ж','2002-10-15','3353515');
		INSERT INTO Студенты (ФИО, Пол, Дата_рождения, Номер_атестатта) VALUES ('Щербакова Василиса Львовна','Ж','2000-06-24','355115');
		INSERT INTO Студенты (ФИО, Пол, Дата_рождения, Номер_атестатта) VALUES ('Соколов Лев Артёмович','М','2003-07-30','4366699');
		INSERT INTO Студенты (ФИО, Пол, Дата_рождения, Номер_атестатта) VALUES ('Лавров Владимир Семёнович','М','2004-09-20','3556222');

		INSERT INTO Специализации (Название_Специализации) VALUES ('Физика');
		INSERT INTO Специализации (Название_Специализации) VALUES ('Биология');
		INSERT INTO Специализации (Название_Специализации) VALUES ('Социология');
		INSERT INTO Специализации (Название_Специализации) VALUES ('Информатика');
		INSERT INTO Специализации (Название_Специализации) VALUES ('Русская и Мировая культура');
		INSERT INTO Специализации (Название_Специализации) VALUES ('Математика');

		INSERT INTO Группы (ID_специализации, Номер_группы, Курс) VALUES (3, 'СоцЮр-1', 1);
		INSERT INTO Группы (ID_специализации, Номер_группы, Курс) VALUES (5, 'Лингвисты-2', 2);
		INSERT INTO Группы (ID_специализации, Номер_группы, Курс) VALUES (6, 'Матем-2', 2);
		INSERT INTO Группы (ID_специализации, Номер_группы, Курс) VALUES (1, 'физики-4', 4);

		INSERT INTO Оценки (ID_Студента, ID_Предмета, Оценка, Время) VALUES (3, 3, 85, '2020-09-01 00:00:00');
		INSERT INTO Оценки (ID_Студента, ID_Предмета, Оценка, Время) VALUES (5, 4, 92, '2020-09-01 00:00:00');
		INSERT INTO Оценки (ID_Студента, ID_Предмета, Оценка, Время) VALUES (1, 1, 78, '2020-09-01 00:00:00');

		INSERT INTO Предметы (ID_Группы, ID_Дисциплины, Время, Тип_Оценки, ID_Преподавателя) VALUES (2, 1, '23', 'Зачет', 3);
		INSERT INTO Предметы (ID_Группы, ID_Дисциплины, Время, Тип_Оценки, ID_Преподавателя) VALUES (3, 3, '23', 'Зачет', 1);
		INSERT INTO Предметы (ID_Группы, ID_Дисциплины, Время, Тип_Оценки, ID_Преподавателя) VALUES (1, 1, '23', 'Экзамен', 2);

		INSERT INTO Активность (ID_Студента, ID_Группы, Время_поступления) VALUES (4, 3, '2020-09-01 00:00:00');
		INSERT INTO Активность (ID_Студента, ID_Группы, Время_поступления, Время_отчисления) VALUES (1, 3, '2021-09-01 00:00:00', '2023-07-01 00:00:00');
		INSERT INTO Активность (ID_Студента, ID_Группы, Время_поступления, Время_отчисления) VALUES (2, 1, '2021-09-01 00:00:00', '2023-07-01 00:00:00');
	}


	10
	{
		SELECT * FROM Активность WHERE Время_отчисления IS NOT NULL;
		SELECT * FROM Активность WHERE Время_поступления >= '2021-09-01 00:00:00';
		SELECT * FROM Активность WHERE Время_отчисления > '2023-07-01 00:00:00';
		SELECT * FROM Активность WHERE ID_Студента = 1;
	}


	11
	{
		SELECT Пол, COUNT(*) AS Количество_Преподавателей
		FROM Преподаватели
		WHERE Дата_рождения BETWEEN DATE(DATE('now'), '-60 years') AND DATE(DATE('now'), '-20 years')
		GROUP BY Пол;


		SELECT Пол, COUNT(*) AS Количество_Студентов
		FROM Студенты
		WHERE Дата_рождения BETWEEN DATE(DATE('now'), '-20 years') AND DATE(DATE('now'), '-19 years')
		GROUP BY Пол;


		WITH Общее_Количество AS (
		SELECT Пол, COUNT(*) AS Количество_Студентов_И_Преподавателей
		FROM Teachers
		WHERE Дата_рождения BETWEEN DATE(DATE('now'), '-60 years') AND DATE(DATE('now'), '-10 years')
		GROUP BY Пол
		UNION ALL
		SELECT Пол, COUNT(*) AS Количество_Студентов_И_Преподавателей
		FROM Студенты
		WHERE Дата_рождения BETWEEN DATE(DATE('now'), '-19 years') AND DATE(DATE('now'), '-10 years')
		GROUP BY Пол
		)
		SELECT Пол, SUM(Количество_Студентов_И_Преподавателей)
		FROM Общее_Количество
		GROUP BY Пол;
	}

	12
	{
		WITH Общее_количество AS (
		SELECT Пол, COUNT(*) AS Количество_Студентов_И_Преподавателей
		FROM Teachers
		WHERE Дата_рождения BETWEEN DATE('1980-01-01') AND DATE('2004-01-01')
		GROUP BY Пол
		UNION ALL
		SELECT Пол, COUNT(*) AS Количество_Студентов_И_Преподавателей
		FROM Студенты
		WHERE Дата_рождения BETWEEN DATE('2002-01-01') AND DATE('2004-01-01')
		GROUP BY Пол
		)
		SELECT Пол, SUM(Количество_Студентов_И_Преподавателей)
		FROM Общее_количество
		GROUP BY Пол;
	}

	13
	{
		SELECT ID_Группы, ID_Преподавателя
		FROM Предметы
		WHERE Время = '23'
		ORDER BY ID_Группы;
	}

	14
	{
		SELECT DISTINCT S.ФИО
		FROM Студенты S
		JOIN Активность A ON S.ID = A.ID_Студента
		JOIN Группы G ON G.ID = A.ID_Группы
		WHERE G.Номер_группы = 'Лингвисты-2'
		AND A.Время_поступления BETWEEN DATE('2002-01-01 00:00:00') AND DATE('2023-01-01 00:00:00');
	}

	15
	{
		WITH СписокГруппПоАкт AS (
		SELECT DISTINCT G.ID AS ID_Группы
		FROM Студенты S
		JOIN Активность A ON S.ID = A.ID_Студента
		JOIN Группы G ON G.ID = A.ID_Группы
		WHERE S.ФИО = 'Скуратов Михаил Александрович'
		AND A.Время_поступления BETWEEN DATE('2022-01-01 00:00:00') AND DATE('2023-01-01 00:00:00')
		AND A.Время_отчисления IS NOT NULL
		)
		SELECT S.ФИО
		FROM СписокГруппПоАкт G
		JOIN Активность A ON G.ID_Группы = A.ID_Группы
		JOIN Студенты S ON S.ID = A.ID_Студента
		
		
		
		
		WITH СписокГруппПоАкт AS (
		SELECT DISTINCT G.ID AS ID_Группы
		FROM Студенты S
		JOIN Активность A ON S.ID = A.ID_Студента
		JOIN Группы G ON G.ID = A.ID_Группы
		WHERE S.ФИО = 'Щербакова Василиса Львовна'
		AND A.Время_поступления BETWEEN DATE('2022-01-01 00:00:00') AND DATE('2023-01-01 00:00:00')
		)
		SELECT S.ФИО
		FROM СписокГруппПоАкт G
		JOIN Активность A ON G.ID_Группы = A.ID_Группы
		JOIN Студенты S ON S.ID = A.ID_Студента
	}

	16
	{
		INSERT INTO Оценки (ID_Студента, ID_Предмета, Оценка, Время) VALUES (1, 4, 0, '2020-09-01 00:00:00');
		INSERT INTO Оценки (ID_Студента, ID_Предмета, Оценка, Время) VALUES (2, 4, 4, '2020-09-01 00:00:00');
		INSERT INTO Оценки (ID_Студента, ID_Предмета, Оценка, Время) VALUES (4, 4, 0, '2020-09-01 00:00:00');
		INSERT INTO Оценки (ID_Студента, ID_Предмета, Оценка, Время) VALUES (1, 3, 3, '2020-09-01 00:00:00');
	}


	17
	}
		SELECT S.ФИО, G.ID_Предмета, G.Оценка
		FROM Студенты S
		JOIN Оценки G ON S.ID = G.ID_Студента
		JOIN Активность A ON A.ID_Студента = S.ID
		LEFT JOIN Предметы Su ON Su.ID = G.ID_Предмета
		WHERE S.ФИО = 'Полякова Варвара Юрьевна';
	}

	18
	{
		SELECT Предметы.ID_Группы, Предметы.ID_Дисциплины, AVG(Оценки.Оценка) AS Средняя_Оценка
		FROM Оценки
		JOIN Предметы ON Оценки.ID_Предмета = Предметы.ID
		WHERE Предметы.ID_Дисциплины = 1
		GROUP BY Предметы.ID_Группы, Предметы.ID_Дисциплины;
	}
]




Триггеры

[
	CREATE TRIGGER Запрет_удаления_Групп
	BEFORE DELETE ON Группы
	FOR EACH ROW
	WHEN EXISTS (SELECT * FROM Активность WHERE ID_Группы = OLD.ID)
	BEGIN
		SELECT RAISE(ABORT, 'Нельзя удалить группу со студентами, учащимися в данный момент времени.');
	END;

	CREATE TRIGGER Запрет_удаления_Специализаций
	BEFORE DELETE ON Специализации
	FOR EACH ROW
	WHEN EXISTS (SELECT Активность.Время_поступления FROM Группы JOIN Активность ON Активность.ID_Группы = Группы.id WHERE ID_специализации = OLD.ID and Активность.Время_поступления IS NOT NULL)
	BEGIN
		SELECT RAISE(ABORT, 'Нельзя удалить специализацию в которых есть группы');
	END;

	CREATE TRIGGER Цепочное_удаление_Гр_и_Спец
	AFTER DELETE ON Группы
	FOR EACH ROW
	WHEN NOT EXISTS (SELECT * FROM Группы WHERE ID_специализации = OLD.ID_специализации)
	BEGIN
		DELETE FROM Специализации WHERE ID = OLD.ID_специализации;
	END;

	CREATE TRIGGER Запрет_удаления_Сущ_Дисциплин
	BEFORE DELETE ON Дисциплины
	FOR EACH ROW
	WHEN EXISTS (SELECT * FROM Предметы WHERE ID_Дисциплины = OLD.ID)
	BEGIN
		SELECT RAISE(ABORT, 'Невозможность удаления текущих существующих дисциплин');
	END;

	CREATE TRIGGER Единый_Преподаватель_На_Группу
	BEFORE INSERT ON Предметы
	WHEN EXISTS (
		SELECT *
		FROM Предметы
		WHERE NEW.ID_Группы = ID_Группы 
		AND NEW.Время = Время 
		AND NEW.ID_Дисциплины = ID_Дисциплины 
		AND NEW.ID_Преподавателя <> ID_Преподавателя
	)
	BEGIN
		SELECT RAISE(ABORT, 'У одной группы одну дисциплину ведет только один перподаватель.');
	END;

	CREATE TRIGGER Студент_числ_Тольк_в_одн_Грп
	BEFORE INSERT ON Активность
	WHEN EXISTS (
		SELECT *
		FROM Активность
		WHERE NEW.ID_Студента = ID_Студента
		AND NEW.Время_отчисления IS NULL
		AND Время_отчисления IS NULL
	)
	BEGIN
		SELECT RAISE(ABORT, 'Студент может числиться одновременно только в одной группе!');
	END;

	CREATE TRIGGER Проверка_на_Отчисленных
	BEFORE INSERT ON Активность
	BEGIN
		UPDATE Активность
		SET Время_отчисления = DATETIME('now')
		WHERE ID_Студента = NEW.ID_Студента AND Время_отчисления IS NULL AND ID <> NEW.ID;
	END;

	CREATE TRIGGER Проверка_на_корректность_выставления_оценки
	BEFORE INSERT ON Оценки
	WHEN NOT EXISTS (
	SELECT *
	FROM Активность
	JOIN Предметы ON Активность.ID_Группы = Предметы.ID_Группы
	WHERE Активность.ID_Студента = NEW.ID_Студента
	AND Предметы.ID = NEW.ID_Предмета
	AND Активность.Время_отчисления IS NULL
	)
	BEGIN
		SELECT RAISE(ABORT, 'Студент не числится в предметной группе');
	END;

	CREATE TRIGGER Удал_Прошлых_Оценок
	AFTER INSERT ON Оценки
	BEGIN
		DELETE FROM Оценки
		WHERE ID_Студента = NEW.ID_Студента
		AND ID_Предмета = NEW.ID_Предмета
		AND (ROWID != NEW.ROWID OR ROWID IS NULL);
	END;

	CREATE TRIGGER Проврка_на_дату_оценки
	BEFORE INSERT ON Оценки
	FOR EACH ROW
	BEGIN
		SELECT
			CASE
				WHEN NEW.Время > DATETIME('now') THEN
					RAISE (ABORT, 'Не допускается проставление успеваемости до начала экзамена/зачета.')
			END;
	END;
